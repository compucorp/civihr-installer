#!/bin/bash

set -e

#
# Setups CiviHR site using Drupal CMS and CiviCRM.

##########################################################
# Global variables

# The location of the Project tree
PRJDIR=

# Location to store temp files, defaults (PRJDIR/tmp)
TMPDIR=

# Location that  points to sites that we build.
BLDDIR=

# Codename for the build instance.
SITE_NAME=

# Identifies site pointing to default state.
# (default: default)
SITE_ID=default

# Unique token for this site.
# (default: random)
SITE_TOKEN=

# Root directory where the site's code will be installed
# (default: BLDDIR/SITE_NAME)
WEB_ROOT=

# Time to wait before allowing updates to git/svn caches (seconds)
CACHE_TTL=60

# When updating a cache record, first attempt to lock it. Wait up to X seconds to acquire lock.
CACHE_LOCK_WAIT=120

# When checking out or updating git/svn, wait up to X seconds for process to complete
SCM_TIMEOUT=3600

# Whether the site has been previously installed
IS_INSTALLED=

# Default user accounts
ADMIN_EMAIL="admin@example.com"
ADMIN_PASS=
ADMIN_USER="admin"

# Printable name of the site (default: $SITE_NAME)
CMS_TITLE=

# The CiviCRM API (default: randomly generated)
CIVI_SITE_KEY=

# Public URL of the site
CMS_URL=

# Path to the base of the CMS
# (default: WEB_ROOT)
CMS_ROOT=

# DB credentials for CMS
CMS_DB_DSN=
CMS_DB_HOST=127.0.0.1
CMS_DB_NAME=
CMS_DB_PASS=
CMS_DB_PORT=3306
CMS_DB_USER=

# Path to the civicrm-core tree
CIVI_CORE=

# DB credentials for Civi
CIVI_DB_DSN=
CIVI_DB_HOST=127.0.0.1
CIVI_DB_NAME=
CIVI_DB_PASS=
CIVI_DB_PORT=3306
CIVI_DB_USER=

# Path to the civicrm.settings.php
CIVI_SETTINGS=

# Path to the civicrm files directory
CIVI_FILES=

# Path to the civicrm templates_c cache directory
CIVI_TEMPLATEC=

# Name of the CiviCRM UF (Drupal)
CIVI_UF=

# The name of the organization (for inclusion in footers, etc)
CIVI_DOMAIN_NAME=

# The default from email address
CIVI_DOMAIN_EMAIL=

# Path to the web-managed extension folder (optional)
CIVI_EXT_DIR=

# URL of the web-managed extension folder (required if CIVI_EXT_DIR is set)
CIVI_EXT_URL=

# Defines -p option for mysql.
PASS_PARAM=

# Defines username and password string for MySQL DSN.
USER_PASS=

# Defines flag to force drop databases.
FORCE_DROP=

##########################################################
# Displays usage message
# Arguments:
#   None
# Returns:
#   None
##########################################################
function civihr_app_usage() {
  APP=$(basename "$0")

  cat <<EOT
Common Options :
  <site-name>        The name of the site-directory to build
Syntax: $APP [site-name] [required-parameters]
Description: Downloads and/or installs the application.

Required parameters:
  --dbuser [mysql-username]     Username for mysql
  --cmsdb  [cms-database-name]  Database name for Drupal CMS installation
  --crmdb  [crm-database-name]  Database name for CiviCRM CRM installation
  --url    [url]                The public URL of the site

Optional parameters:
  --dbpass [mysql-password]     Password for mysql
  --webroot [root dir path]     The full path to the website root. If not given, the site will be installed in the current directory
  --force-drop                  Drop existing databases for --crmdb and --cmsdb options.
EOT
  exit 99
}


##########################################################
# Creates random password.
# Arguments:
#   Length of the string
# Returns:
#   Random alphanumeric password string
# Usage:
#   civihr_make_passwd 12
##########################################################
function civihr_make_passwd() {
  if [ -n "$1" ]; then
    echo $(cat /dev/urandom | LC_ALL=C tr -dc 'a-zA-Z0-9' | fold -w "$1" | head -n 1)
  fi
}

##########################################################
# Assert that shell variables are defined. If not defined, exit with an error.
# If a variable missing, the application dies.
# Arguments:
#   Global Variables
# Returns:
#   Value of the Global Variables.
# Usage:
#   civihr_assert_vars SITE_NAME
##########################################################
function civihr_assert_vars() {
  _civihr_assert_vars_back="$-"

  set +x
  context="$1"
  shift
  while [ "$1" ]; do
    var="$1"
    eval "val=\$$var"
    if [ -z "$val" ]; then
      echo "missing variable: $var [in $context]"
      exit 98
    fi
    shift
  done

  set -${_civihr_assert_vars_back}
}

##########################################################
# Summarize the content of key environment variables.
# Arguments:
#   All the command line parameters i.e $@
# Returns:
#   Displays values for each of the parameter passed.
# Usage:
#   civihr_summary $@
##########################################################
function civihr_summary() {
  if [ -n "$1" ]; then
    echo "$1"
  fi
  shift

  civihr_assert_vars civihr_summary "$@"
  for var in "$@" ; do
    eval "val=\$$var"
    echo " - $var: $val"
  done
}


##########################################################
# Creates and ensure parent directory exists.
# Arguments:
#   File Name.
# Returns:
#   Creates Parent directory.
# Usage:
#   civihr_make_parent <file-name>
##########################################################
function civihr_make_parent() {
  parentdir=$(dirname "$1")
  if [ ! -d "$parentdir" ]; then
    mkdir -p "$parentdir"
  fi
}

##########################################################
# Checks whether directory exists, if not then create it.
# Arguments:
#   Folder Name.
# Returns:
#   Creates directory.
# Usage:
#   civihr_mkdir <directory-name>
##########################################################
function civihr_mkdir() {
  for a in "$@" ; do
    if [ ! -d "$a" ]; then
      mkdir -p "$a"
    fi
  done
}

##########################################################
# Creates host and port to a single string.
# Arguments:
#   Host and Port.
# Returns:
#   Creates host and port of database string.
# Usage:
#   civihr_build_host_port <host> <port>
##########################################################
function civihr_build_host_port() {
  local host=$1
  local port=$2
  if [ -z "$port" ]; then
    echo "$host"
  else
    echo "$host:$port"
  fi
}

##########################################################
# Setup MySQL services
# Arguments:
#   None
# Returns:
#   None
# Usage:
#   database_install
##########################################################
function database_install() {
  _database_install_cms
  _database_install_civi
}

##########################################################
# Creates empty Database for CMS.
# Assign required values to Global Variables.
# Arguments:
#   None
# Returns:
#   None
##########################################################
function _database_install_cms() {

  echo "[[Setting up MySQL for CMS]]"
  civihr_assert_vars _database_install_cms CMS_ROOT SITE_NAME SITE_ID TMPDIR
  # Force drop database.
  if [ "$FORCE_DROP" ]; then
      mysql -u$DB_USER $PASS_PARAM -e "drop database $CMSdbName" || { echo "[[Please fix above MySQL error.]]"; exit 1;  }
  fi
  # Create database.
  mysql -u$DB_USER $PASS_PARAM -e "create database $CMSdbName" || { echo "[[Please fix above MySQL error.]]"; exit 1;  }
  # Assign values to global variables.
  [ -z "$CMS_DB_USER" ]           && CMS_DB_USER="$DB_USER"
  [ -z "$CMS_DB_PASS" ]           && CMS_DB_PASS="$DB_PASS"
  [ -z "$CMS_DB_NAME" ]           && CMS_DB_NAME="$CMSdbName"

  CMS_DB_HOSTPORT=$(civihr_build_host_port "$CMS_DB_HOST" "$CMS_DB_PORT")

  [ -z "$CMS_DB_DSN" ]           && CMS_DB_DSN="mysql://${USER_PASS}@${CMS_DB_HOSTPORT}/${CMSdbName}?new_link=true"
}

##########################################################
# Creates empty Database for CRM ie CiviHR.
# Assign required values to Global Variables.
# Arguments:
#   None
# Returns:
#   None
##########################################################
function _database_install_civi() {

  echo "[[Setting up MySQL for CiviCRM]]"
  civihr_assert_vars _database_install_civi CMS_ROOT SITE_NAME SITE_ID TMPDIR
  # Force drop database.
  if [ "$FORCE_DROP" ]; then
      mysql -u$DB_USER $PASS_PARAM -e "drop database $CIVIdbName" || { echo "[[Please fix above MySQL error.]]"; exit 1;  }
  fi
  # Create database.
  mysql -u$DB_USER $PASS_PARAM -e "create database $CIVIdbName" || { echo "[[Please fix above MySQL error.]]"; exit 1;  }
  # Assign values to global variables.
  [ -z "$CIVI_DB_USER" ]           && CIVI_DB_USER="$DB_USER"
  [ -z "$CIVI_DB_PASS" ]           && CIVI_DB_PASS="$DB_PASS"
  [ -z "$CIVI_DB_NAME" ]           && CIVI_DB_NAME="$CIVIdbName"

  CIVI_DB_HOSTPORT=$(civihr_build_host_port "$CIVI_DB_HOST" "$CIVI_DB_PORT")
  [ -z "$CIVI_DB_DSN" ]           && CIVI_DB_DSN="mysql://${USER_PASS}@${CIVI_DB_HOSTPORT}/${CIVIdbName}?new_link=true"
}

##########################################################
# Generate Configuration Files and Installs Civicrm.
# Arguments:
#   None
# Returns:
#   None
##########################################################
function civicrm_install() {
  civihr_assert_vars civicrm_install CIVI_CORE CIVI_FILES CIVI_TEMPLATEC CIVI_DOMAIN_NAME CIVI_DOMAIN_EMAIL
  if [ ! -d "$CIVI_CORE/bin" -o ! -d "$CIVI_CORE/CRM" ]; then
    echo "Failed to locate valid civi root: $CIVI_CORE"
    exit 1
  fi
  ## Create CiviCRM data dirs
  civihr_mkdir "$CIVI_FILES" "$CIVI_TEMPLATEC"
  if [ -n "$CIVI_EXT_DIR" ]; then
    civihr_mkdir "$CIVI_EXT_DIR"
  fi

  ## Create CiviCRM config files
  civicrm_make_settings_php
  civicrm_make_setup_conf

  pushd "$CIVI_CORE" >> /dev/null
    if [ -e "sql/civicrm.mysql" -a -e "sql/civicrm_generated.mysql" ]; then
      cat sql/civicrm.mysql sql/civicrm_generated.mysql | mysql -u$CIVI_DB_USER $PASS_PARAM $CIVI_DB_NAME

    else
      echo "Failed to locate civi SQL files"
    fi
  popd >> /dev/null

  eval mysql -u$CIVI_DB_USER $PASS_PARAM $CIVI_DB_NAME <<EOSQL
    UPDATE civicrm_domain SET name = '$CIVI_DOMAIN_NAME';
    SELECT @option_group_id := id
      FROM civicrm_option_group n
      WHERE name = 'from_email_address';
    UPDATE civicrm_option_value
      SET label = '$CIVI_DOMAIN_EMAIL'
      WHERE option_group_id = @option_group_id
      AND value = '1';
EOSQL
}

##########################################################
# Generates Civicrm "civicrm.settings.php" file.
# Arguments:
#   None
# Returns:
#   None
##########################################################
function civicrm_make_settings_php() {
  civihr_assert_vars civicrm_make_settings_php CIVI_SETTINGS CIVI_CORE CIVI_UF CIVI_TEMPLATEC CMS_URL CIVI_SITE_KEY
  civihr_assert_vars civicrm_make_settings_php CMS_DB_HOST CMS_DB_NAME CMS_DB_USER
  civihr_assert_vars civicrm_make_settings_php CIVI_DB_HOST CIVI_DB_NAME CIVI_DB_USER

  local tpl

  for tpl in templates/CRM/common/civicrm.settings.php.template templates/CRM/common/civicrm.settings.php.tpl ; do
    if [ -f "$CIVI_CORE/$tpl" ]; then
      break
    fi
  done
  if [ ! -f "$CIVI_CORE/$tpl" ]; then
    echo "Failed to locate template for civicrm.settings.php"
    exit 96
  fi

  CMS_DB_HOSTPORT=$(civihr_build_host_port "$CMS_DB_HOST" "$CMS_DB_PORT")
  CIVI_DB_HOSTPORT=$(civihr_build_host_port "$CIVI_DB_HOST" "$CIVI_DB_PORT")

  cat "$CIVI_CORE/$tpl" \
    | sed "s;%%baseURL%%;${CMS_URL};" \
    | sed "s;%%cms%%;${CIVI_UF};" \
    | sed "s;%%CMSdbHost%%;${CMS_DB_HOSTPORT};" \
    | sed "s;%%CMSdbName%%;${CMS_DB_NAME};" \
    | sed "s;%%CMSdbPass%%;${CMS_DB_PASS};" \
    | sed "s;%%CMSdbUser%%;${CMS_DB_USER};" \
    | sed "s;%%crmRoot%%;${CIVI_CORE}/;" \
    | sed "s;%%dbHost%%;${CIVI_DB_HOSTPORT};" \
    | sed "s;%%dbName%%;${CIVI_DB_NAME};" \
    | sed "s;%%dbPass%%;${CIVI_DB_PASS};" \
    | sed "s;%%dbUser%%;${CIVI_DB_USER};" \
    | sed "s;%%siteKey%%;${CIVI_SITE_KEY};" \
    | sed "s;%%templateCompileDir%%;${CIVI_TEMPLATEC};" \
    > "$CIVI_SETTINGS"
  echo >> "$CIVI_SETTINGS"

  if [ -n "$CIVI_EXT_DIR" ]; then
    cat >> "$CIVI_SETTINGS" << EOF
    global \$civicrm_setting;
    \$civicrm_setting['Directory Preferences']['extensionsDir'] = '$CIVI_EXT_DIR';
    \$civicrm_setting['URL Preferences']['extensionsURL'] = '$CIVI_EXT_URL';
EOF
  fi
}

##########################################################
# Generate Civicrm "setup.conf" file.
# Arguments:
#   None
# Returns:
#   None
##########################################################
function civicrm_make_setup_conf() {
  civihr_assert_vars civicrm_make_setup_conf PRJDIR CMS_ROOT CIVI_CORE CIVI_UF CIVI_DB_NAME CIVI_DB_USER

  cat > "$CIVI_CORE/bin/setup.conf" << EOF
    PRJDIR="$PRJDIR"
    CMS_ROOT="$CMS_ROOT"
    DBNAME="$CIVI_DB_NAME"
    DBUSER="$CIVI_DB_USER"
    DBPASS="$CIVI_DB_PASS"
    DBHOST="$CIVI_DB_HOST"
    DBPORT="$CIVI_DB_PORT"
    SVNROOT="$CIVI_CORE"
    CIVISOURCEDIR="$CIVI_CORE"
    SCHEMA=schema/Schema.xml
    DBARGS=""
    PHP5PATH=""
    DBLOAD="$DBLOAD"
    GENCODE_CMS="$CIVI_UF"
EOF
}

##########################################################
# Calls Drupal installation process function.
# Arguments:
#   None
# Returns:
#   None
##########################################################
function drupal_install() {
  drupal7_install
}

##########################################################
# Generate Configuration Files and Installs Drupal.
# Arguments:
#   None
# Returns:
#   None
##########################################################
function drupal7_install() {

  civihr_assert_vars drupal7_install CMS_ROOT SITE_ID CMS_TITLE CMS_DB_USER  CMS_DB_HOST CMS_DB_NAME ADMIN_USER ADMIN_PASS CMS_URL
  DRUPAL_SITE_DIR="$SITE_ID"

  CMS_DB_HOSTPORT=$(civihr_build_host_port "$CMS_DB_HOST" "$CMS_DB_PORT")

  pushd "$CMS_ROOT" >> /dev/null
    [ -f "sites/$DRUPAL_SITE_DIR/settings.php" ] && rm -f "sites/$DRUPAL_SITE_DIR/settings.php"

    drush site-install -y "$@" \
      --db-url="mysql://${USER_PASS}@${CMS_DB_HOSTPORT}/${CMS_DB_NAME}" \
      --account-name="$ADMIN_USER" \
      --account-pass="$ADMIN_PASS" \
      --account-mail="$ADMIN_EMAIL" \
      --site-name="$CMS_TITLE" \
      --sites-subdir="$DRUPAL_SITE_DIR"
    chmod u+w "sites/$DRUPAL_SITE_DIR"
    chmod u+w "sites/$DRUPAL_SITE_DIR/settings.php"
    chmod u-w "sites/$DRUPAL_SITE_DIR/settings.php"


    ## Setup extra directories
    civihr_mkdir "sites/${DRUPAL_SITE_DIR}/files"
    civihr_mkdir "sites/${DRUPAL_SITE_DIR}/modules"

  popd >> /dev/null
}

##########################################################
# Initialize (or update) a cached copy of a git repo in $CACHE_DIR.
# Arguments:
#   URL - Git Repo URL address.
#   Cache Directory.
# Usage:
#   git_cache_setup <url> <cache-dir>
##########################################################
function git_cache_setup() {
  local url="$1"
  local cachedir="$2"
  local lock="${cachedir}.lock"
  local lastrun="${cachedir}.lastrun"
  ## TODO: defensive programming: $cachedir should not end in "/"

  if [ -d "$cachedir" -a -f "$lastrun" -a -z "$FORCE_DOWNLOAD" ]; then
    if php -r "exit($argv[1] + file_get_contents($argv[2]) < time() ? 1 : 0);" -- $CACHE_TTL "$lastrun" ; then
      echo "SKIP: git_caccaches.shhe_setup '$url' $cachedir' (recently updated; ttl=$CACHE_TTL)"
      return
    fi
  fi

  civihr_make_parent "$lock"
  if pidlockfile.php "$lock" $$ $CACHE_LOCK_WAIT ; then
    php -r 'echo time();' > "$lastrun"
    if [ ! -d "$cachedir" ]; then
      ## clone
      echo "[[Initialize cache dir: $cachedir]]"
      civihr_make_parent "$cachedir"
      timeout.php $SCM_TIMEOUT git clone --mirror "$url" "$cachedir"
    else
      ## update
      if [ -z "$OFFLINE" ]; then
        pushd "$cachedir" >> /dev/null
          git remote set-url origin "$url"
          timeout.php $SCM_TIMEOUT git fetch origin +refs/heads/*:refs/heads/* -u
        popd >> /dev/null
      else
        echo "[[Offline mode. Skip cache update: $cachedir]]"
      fi
    fi

    rm -f "$lock"
  else
    echo "ERROR: git_cache_setup '$url' '$cachedir': failed to acquire lock"
  fi
}

##########################################################
# Fix the remote configurations of any git repos in <build-dir>, changing any
# references to <cache-base-dir> to proper remotes
# Usage:
#   git_cache_deref_remotes <cache-base-dir> <build-dir>
##########################################################
function git_cache_deref_remotes() {
  local _shellopt="$-"
  set +x

  local cachedir="$1"
  local builddir="$2"
  find "$builddir" -type d -name .git | while read -r gitdir; do
    pushd "$gitdir" >> /dev/null
      pushd ".." >> /dev/null
        local origin_old
        origin_old=$(git config --get remote.origin.url)
        if [[ $origin_old == ${cachedir}* || $origin_old == file://${cachedir}* || $origin_old == file:///${cachedir}*  ]]; then
          local origin_path
          origin_path=$(echo "$origin_old" | sed 's;file://;;')
          pushd "$origin_path" >> /dev/null
            origin_new=$(git config --get remote.origin.url)
          popd >> /dev/null
          echo "Change origin in [$gitdir] from [$origin_old] to [$origin_new]"
          git remote set-url origin "$origin_new"
          git fetch origin
        fi
      popd >> /dev/null
    popd >> /dev/null
  done

  set -${_shellopt}
}

##########################################################
# Parse provided options and assign values according.
# Arguments:
#   All the command line parameters i.e $@
# Returns:
#   None
# Usage:
#   civihr_parse_options "$@"
##########################################################
function civihr_parse_options() {

  civihr_mkdir "$TMPDIR" "$BLDDIR"

  # Checking for site-name parameter.
  [ "${1::1}" == "-" ]  && echo "[[Please provide site-name]]" && civihr_app_usage && exit 1

  [ -z "$SITE_NAME" ]  && SITE_NAME="$1"

  while [ -n "$1" ] ; do
    OPTION="$1"
    shift
    case "$OPTION" in
      -h|--help|-?)
        civihr_app_usage
        ;;

      --dbuser)
        [ "${1::1}" == "-" ] && echo "[[Missing value for option --dbuser.]]" && civihr_app_usage && exit 1
        DB_USER="$1"
        shift
        ;;

      --dbpass)
        if [ -z "$1" ]; then
          echo -n "Enter Password for Mysql:"
          read -s DB_PASS
          echo
        else
          DB_PASS="$1"
        fi
        [ -n "$DB_PASS" ] && PASS_PARAM="-p$DB_PASS"
        shift
        ;;

      --dbport)
        DB_PORT="$1"
        shift
        ;;

      --cmsdb)
        [ "${1::1}" == "-" ] && echo "[[Missing value for option --cmsdb.]]" && civihr_app_usage && exit 1
        CMSdbName="$1"
        shift
        ;;

      --crmdb)
        [ "${1::1}" == "-" ] && echo "[[Missing value for option --crmdb.]]" && civihr_app_usage && exit 1
        CIVIdbName="$1"
        shift
        ;;

      --url)
        CMS_URL="$1"
        shift
        ;;

      --webroot)
        [ -z "$1" ] && echo "[[Missing value for option --webroot.]]" && civihr_app_usage && exit 1
        WEB_ROOT="$1"
        shift
        ;;

      --force-drop)
        FORCE_DROP=1
        ;;

      *)
         if [ "${OPTION::1}" == "-" ]; then
           echo "[[Unrecognized option: $OPTION]]"
           civihr_app_usage
           exit
         fi
        ;;
    esac
  done

# Checking for all required options/arguments.
[ -z "$DB_USER" ] || [ -z "$CMSdbName" ] || [ -z "$CIVIdbName" ] || [ -z "$CMS_URL" ] && echo "[[Please provide missing options/agruments.]]" && civihr_app_usage && exit 99

# Assigning values.
[ -z "$USER_PASS" ]          && USER_PASS="$DB_USER"
[ -n "$DB_PASS" ]            && USER_PASS="$DB_USER:$DB_PASS"

[ -z "$SITE_NAME" ]          && civihr_app_usage && exit 99
[ -z "$WEB_ROOT" ]           && WEB_ROOT="$BLDDIR/$SITE_NAME"
[ -z "$CMS_ROOT" ]           && CMS_ROOT="$WEB_ROOT"
[ -z "$CIVI_SITE_KEY" ]      && CIVI_SITE_KEY=$(civihr_make_passwd 16)
[ -z "$ADMIN_PASS" ]         && ADMIN_PASS=$(civihr_make_passwd 12)
[ -z "$CMS_TITLE" ]          && CMS_TITLE="$SITE_NAME"
[ -z "$SITE_TOKEN" ]         && SITE_TOKEN=$(civihr_make_passwd 16)

}

##########################################################
# Determine the absolute path of the directory with the file
# Arguments:
#   Name of the shell script i.e $0
# Returns:
#   None
# Usage:
#   civihr_absdirname <file-path>
##########################################################
function civihr_absdirname() {
  pushd $(dirname "$0") >> /dev/null
    pwd
  popd >> /dev/null
}

BINDIR=$(civihr_absdirname "$0")
PRJDIR=$(pwd)
TMPDIR="$PRJDIR/temp"
BLDDIR="$PRJDIR"

export PATH="$PATH:$BINDIR"

civihr_parse_options "$@"

# Checking for Git dependencies.
command -v git >/dev/null 2>&1 || { echo "Please download git to continue."; exit 1; }
# Checking for Drush dependencies.
command -v drush >/dev/null 2>&1 || { echo "Please download drush to continue."; exit 1; }

##########################################################
# Downloads Drupal, CiviCRM and CiviHR from drush.make file.
# Arguments:
#   None
# Returns:
#   None
# Usage:
#   civihr_setup_structure
##########################################################
function civihr_setup_structure() {
  MAKEFILE="${BINDIR}/drush.make"
  drush -y make --concurrency=5 --working-copy "$MAKEFILE" "$WEB_ROOT"
}

##########################################################
# Creates the default CiviHR users
# Arguments:
#   None
# Returns:
#   None
##########################################################
function _civihr_create_default_users() {
  drush -y user-create --password="civihr_staff" --mail="civihr_staff@compucorp.co.uk" "civihr_staff"
  drush -y user-add-role Staff "civihr_staff"

  drush -y user-create --password="civihr_manager" --mail="civihr_manager@compucorp.co.uk" "civihr_manager"
  drush -y user-add-role Manager "civihr_manager"

  drush -y user-create --password="civihr_admin" --mail="civihr_admin@compucorp.co.uk" "civihr_admin"
  drush -y user-add-role "HR Admin" "civihr_admin"
}

##########################################################
# Deletes the "Name and address profile"
# Arguments:
#   None
# Returns:
#   None
##########################################################
function _civihr_delete_name_and_address_profile() {
  PROFILE_ID=`[[ $(drush cvapi UFGroup.getsingle return="id" title="Name and address") =~ \[id\].+([1-9]) ]] && echo ${BASH_REMATCH[1]}`

  drush cvapi UFGroup.delete sequential=1 id="$PROFILE_ID"
}

##########################################################
# Disables the unused drupal blocks, leaving only the "main content" one active
# Arguments:
#   None
# Returns:
#   None
##########################################################
function _civihr_disabled_unused_blocks() {
  for block in 'navigation' 'form' 'powered-by' 'help' 'login' \
    '2' '3' '5' '7'
  do
    drush block-disable --delta="$block"
  done
}

##
# Runs the scripts that patches the compucorp's civicrm-core fork on
# the original core files
function apply_core_fork_patch() {
  pushd "${CIVI_CORE}/tools/extensions/civihr" >> /dev/null
    APPLY_FOR_SCRIPT=bin/apply-core-fork-patch.sh
    if [ -e ${APPLY_FOR_SCRIPT} ]; then
        bash ${APPLY_FOR_SCRIPT}
    fi;
  popd
}

##########################################################
# Installs CiviHR extensions
# Arguments:
#   None
# Returns:
#   None
##########################################################
function install_civihr() {
  bash ${CIVI_CORE}/tools/extensions/civihr/bin/drush-install.sh ${CIVI_CORE}
}

##########################################################
# Sets up the themes
# Arguments:
#   None
# Returns:
#   None
##########################################################
function _civihr_setup_themes() {
  ## Drupal theme
  drush -y en civihr_default_theme
  drush -y vset theme_default civihr_default_theme

  ## Civicrm and admin theme
  drush -y vset admin_theme seven
  drush -y vset civicrmtheme_theme_admin seven
  drush -y vset civicrmtheme_theme_public seven
}

##########################################################
# Create config files and databases; fill the databases
# Arguments:
#   None
# Returns:
#   None
##########################################################
function civihr_install_site(){

  ## Creating databases for Drupal and CIVICRM.
  database_install

  ## Setup Drupal (config files, database tables)
  drupal_install

  ## Setup CiviCRM (config files, database tables)
  DRUPAL_SITE_DIR="$SITE_ID"
  CIVI_DOMAIN_NAME="Demonstrators Anonymous"
  CIVI_DOMAIN_EMAIL="\"Demonstrators Anonymous\" <info@example.org>"
  CIVI_CORE="${WEB_ROOT}/sites/all/modules/civicrm"
  CIVI_SETTINGS="${WEB_ROOT}/sites/${DRUPAL_SITE_DIR}/civicrm.settings.php"
  CIVI_FILES="${WEB_ROOT}/sites/${DRUPAL_SITE_DIR}/files/civicrm"
  CIVI_TEMPLATEC="${CIVI_FILES}/templates_c"
  CIVI_UF="Drupal"

  civicrm_install

  ## Extra configuration
  pushd "${WEB_ROOT}/sites/${DRUPAL_SITE_DIR}" >> /dev/null

    drush -y dl drush_extras drush_taxonomyinfo

    drush -y updatedb
    drush -y dis overlay shortcut color
    drush -y en \
      administerusersbyrole \
      role_delegation \
      civicrm \
      toolbar \
      locale \
      seven \
      userprotect \
      masquerade \
      smtp \
      logintoboggan \
      menu_attributes \
      roles_for_menu

    drush vset logintoboggan_login_with_email 1
    drush vset --format=integer user_pictures 0

    drush vset --format=integer node_export_reset_path_webform 0

    ## Disable error logging in Drupal
    drush vset -y error_level 0

    ## Mail settings
    drush vset --format=integer mimemail_sitestyle 0
    drush vset --format=integer smtp_allowhtml 1
    drush vset mailsystem_theme default
    drush dis -y mimemail_compress

    apply_core_fork_patch
    install_civihr

    drush -y en civicrmtheme \
      civihr_employee_portal_features \
      civihr_leave_absences \
      leave_and_absences_features \
      civihr_default_permissions \
      onboarding_slideshow \
      civihr_default_mail_content

     ## Fix gzipped file
    pushd ${WEB_ROOT}/libraries/jquery.cycle;
    if file jquery.cycle.all.js | grep -q 'gzip'; then
      mv jquery.cycle.all.js jquery.cycle.all.js.gz
      gunzip jquery.cycle.all.js.gz
    fi
    popd

    drush -y features-revert civihr_employee_portal_features

    _civihr_setup_themes
    _civihr_create_default_users
    _civihr_disabled_unused_blocks
    _civihr_delete_name_and_address_profile

    ## Create My Details and My Emergency Contact forms
    drush refresh-node-export-files

    ## Clear the cache
    drush cc all
  popd >> /dev/null

}

##########################################################
# Downloads all the required repos for Drupal , CiviCRM and CiviHR.
# Arguments:
#   None
# Returns:
#   None
##########################################################
function civihr_app_download() {
  civihr_assert_vars civihr_app_download WEB_ROOT PRJDIR SITE_NAME TMPDIR

  echo "[[Download $SITE_NAME ( in '$WEB_ROOT')]]"

  if [ ! -d "$WEB_ROOT" ]; then
    IS_INSTALLED=
    pushd "$PRJDIR" > /dev/null
      civihr_setup_structure
    if [ ! -d "$WEB_ROOT" ]; then
      echo "Download failed to create directory"
      exit 97
    fi
  else
    echo "The $WEB_ROOT folder already exists" && exit
  fi
}

##########################################################
# Runs the installation process for CMS, CiviCRM and CiviHR.
# Arguments:
#   None
# Returns:
#   None
##########################################################
function civihr_app_install() {
  civihr_assert_vars civihr_app_install WEB_ROOT  SITE_NAME SITE_ID

  echo "[[Install $SITE_NAME ( in '$WEB_ROOT')]]"

  if [ ! -d "$WEB_ROOT" ]; then
    echo "Cannot install: missing root '$WEB_ROOT'"
    exit 96
  fi

  if [ -z "$IS_INSTALLED" ]; then
    pushd "$WEB_ROOT" > /dev/null
      civihr_install_site
    popd > /dev/null
    IS_INSTALLED=1
  else
    echo "Already installed ${SITE_NAME}"
  fi
}

##########################################################
# Displays CMS,DB and Site User Credentials.
# Arguments:
#   None
# Returns:
#   None
##########################################################
function civihr_app_show() {

    civihr_app_show_summary \
      CMS_ROOT CMS_URL CMS_DB_DSN \
      CIVI_DB_DSN \
      ADMIN_USER ADMIN_PASS
}

##########################################################
# Displays Site Summary
# Arguments:
#   None
# Returns:
#   None
##########################################################
function civihr_app_show_summary() {
  civihr_assert_vars civi_app_show_summary SITE_NAME TMPDIR "$@"
  civihr_summary "[[Show site summary ($SITE_NAME)]]" "$@"
  echo "[[General notes]]"
  echo " - You may need to restart httpd."
  echo " - You may need to add the hostname and IP to /etc/hosts or DNS."
  ## Removing unwanted temporary files.
  if [ -d "$TMPDIR/$SITE_NAME" ]; then
    rm -rf "$TMPDIR"
  fi
}

civihr_app_download
civihr_app_install
civihr_app_show
